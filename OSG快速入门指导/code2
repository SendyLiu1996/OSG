#include <osg/Geode>
#include <osg/Group>
#include <osg/MatrixTransform>
#include <osg/Geometry>
#include <osg/StateSet>
#include <osg/StateAttribute>
#include <osg/ShadeModel>
#include <osg/CullFace>
#include <osg/PolygonMode>
#include <osg/LineWidth>
#include <osg/Node>
#include <osg/Notify>
#include <osgViewer/viewer>
#include <osgDB/fstream>
#include <osgDB/readFile>
#include <osgDB/WriteFile>
#include <osgDB/Registry>

using namespace std;

osg::ref_ptr<osg::Drawable> createDrawable()
{
	osg::ref_ptr<osg::Geometry> geom = new osg::Geometry;

	osg::ref_ptr<osg::Vec3Array> v = new osg::Vec3Array;
	geom->setVertexArray(v.get());
	v->push_back(osg::Vec3(-1.15f, -.5f, -.85f));
	v->push_back(osg::Vec3(.85f, -.5f, -.85f));
	v->push_back(osg::Vec3(.85f, -.5f, 1.15f));
	v->push_back(osg::Vec3(-1.15f, -.5f, 1.15f));
	v->push_back(osg::Vec3(-.85f, .5f, -1.15f));
	v->push_back(osg::Vec3(-.85f, .5f, .85f));
	v->push_back(osg::Vec3(1.15f, .5f, .85f));
	v->push_back(osg::Vec3(1.15f, .5f, -1.15f));

	osg::ref_ptr<osg::Vec4Array> c = new osg::Vec4Array;
	geom->setColorArray(c.get());
	geom->setColorBinding(osg::Geometry::BIND_PER_VERTEX);
	c->push_back(osg::Vec4(1.f, 0.33f, 0.f, 1.f));
	c->push_back(osg::Vec4(0.f, 1.f, 0.f, 1.f));
	c->push_back(osg::Vec4(0.f, 0.33f, 1.f, 1.f));
	c->push_back(osg::Vec4(1.f, 1.f, 1.f, 1.f));
	c->push_back(osg::Vec4(1.f, 0.f, 0.f, 1.f));
	c->push_back(osg::Vec4(1.f, .66f, 1.f, 1.f));
	c->push_back(osg::Vec4(0.f, 0.f, 1.f, 1.f));
	c->push_back(osg::Vec4(0.f, .66f, 0.f, 1.f));

	geom->addPrimitiveSet(
		new osg::DrawArrays(osg::PrimitiveSet::QUADS, 0, 8));

	return geom.get();
}

osg::ref_ptr<osg::Node> createSceneGraph()
{
	//创建Group根节点
	osg::ref_ptr<osg::Group> root = new osg::Group;
	{
		//在根节点的StateSet中禁止光照
		//使用PROTECTED以保证这一修改不会被osgviewer覆盖
		osg::StateSet* state = root->getOrCreateStateSet();
		state->setMode(GL_LIGHTING, osg::StateAttribute::OFF | osg::StateAttribute::PROTECTED);

	}

	//创建Geode叶节点并关联Drawable
	osg::ref_ptr<osg::Geode> geode = new osg::Geode;
	geode->addDrawable(createDrawable().get());

	osg::Matrix m;
	{
		//左上角：使用缺省属性渲染几何体。
		osg::ref_ptr<osg::MatrixTransform> mt1 = new osg::MatrixTransform;
		m.makeTranslate(-2.f, 0.f, 2.f);
		mt1->setMatrix(m);
		root->addChild(mt1.get());
		mt1->addChild(geode.get());
	}
	{
		//右上角：设置着色模式为FLAT（单色）。
		osg::ref_ptr<osg::MatrixTransform> mt2 = new osg::MatrixTransform;
		m.makeTranslate(2.f, 0.f, 2.f);
		mt2->setMatrix(m);
		root->addChild(mt2.get());
		mt2->addChild(geode.get());
		osg::StateSet* state = mt2->getOrCreateStateSet();
		osg::ShadeModel* sm = new osg::ShadeModel();
		sm->setMode(osg::ShadeModel::FLAT);
		state->setAttribute(sm);
	}
	{
		//左下角：开启背面剔除
		osg::ref_ptr<osg::MatrixTransform> mt3 = new osg::MatrixTransform();
		m.makeTranslate(-2.f, 0.f, -2.f);
		mt3->setMatrix(m);
		root->addChild(mt3.get());
		mt3->addChild(geode.get());
		osg::StateSet* state = mt3->getOrCreateStateSet();
		osg::CullFace* cf = new osg::CullFace();
		state->setAttributeAndModes(cf);
	}
	{
		//右下角：设置多边形填充模式为LINE
		osg::ref_ptr<osg::MatrixTransform> mt4 = new osg::MatrixTransform();
		m.makeTranslate(2.f, 0.f, -2.f);
		mt4->setMatrix(m);
		root->addChild(mt4.get());
		mt4->addChild(geode.get());
		osg::StateSet* state = mt4->getOrCreateStateSet();
		osg::PolygonMode* pm = new osg::PolygonMode(osg::PolygonMode::FRONT_AND_BACK,
														osg::PolygonMode::LINE);
		state->setAttributeAndModes(pm);
		osg::LineWidth* lw = new osg::LineWidth(3.f);
		state->setAttribute(lw);
	}

	return root.get();
}


int main(int argc, char **argv)
{
	osg::ref_ptr<osg::Node> root = createSceneGraph();
	if (!root.valid())
	{
		osg::notify(osg::FATAL) << "Failed in createSceneGraph()." << endl;
		return 1;
	}

	std::string out("State.osg");
	if (!(osgDB::writeNodeFile(*(root.get()), out)))
	{
		osg::notify(osg::FATAL) << "Failed in osgDB::writeNodeFile()." << endl;
		return 1;
	}

	osg::notify(osg::ALWAYS) << "Successfully wrote \"" << out << "\". Execute \"osgviewer " << out << "\" to view." << endl;
}
